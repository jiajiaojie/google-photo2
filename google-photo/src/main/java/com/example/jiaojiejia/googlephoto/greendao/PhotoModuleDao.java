package com.example.jiaojiejia.googlephoto.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.jiaojiejia.googlephoto.bean.PhotoModule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_MODULE".
*/
public class PhotoModuleDao extends AbstractDao<PhotoModule, Long> {

    public static final String TABLENAME = "PHOTO_MODULE";

    /**
     * Properties of entity PhotoModule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImageId = new Property(1, int.class, "imageId", false, "IMAGE_ID");
        public final static Property Origin = new Property(2, String.class, "origin", false, "ORIGIN");
        public final static Property Compress = new Property(3, String.class, "compress", false, "COMPRESS");
        public final static Property Remote = new Property(4, String.class, "remote", false, "REMOTE");
    }


    public PhotoModuleDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_MODULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMAGE_ID\" INTEGER NOT NULL ," + // 1: imageId
                "\"ORIGIN\" TEXT," + // 2: origin
                "\"COMPRESS\" TEXT," + // 3: compress
                "\"REMOTE\" TEXT);"); // 4: remote
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PHOTO_MODULE_ORIGIN ON \"PHOTO_MODULE\"" +
                " (\"ORIGIN\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_MODULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoModule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getImageId());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(3, origin);
        }
 
        String compress = entity.getCompress();
        if (compress != null) {
            stmt.bindString(4, compress);
        }
 
        String remote = entity.getRemote();
        if (remote != null) {
            stmt.bindString(5, remote);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoModule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getImageId());
 
        String origin = entity.getOrigin();
        if (origin != null) {
            stmt.bindString(3, origin);
        }
 
        String compress = entity.getCompress();
        if (compress != null) {
            stmt.bindString(4, compress);
        }
 
        String remote = entity.getRemote();
        if (remote != null) {
            stmt.bindString(5, remote);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoModule readEntity(Cursor cursor, int offset) {
        PhotoModule entity = new PhotoModule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // imageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // origin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // compress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // remote
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoModule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageId(cursor.getInt(offset + 1));
        entity.setOrigin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoModule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoModule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoModule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
